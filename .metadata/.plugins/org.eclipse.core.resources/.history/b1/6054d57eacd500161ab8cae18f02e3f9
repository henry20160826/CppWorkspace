//============================================================================
// Name        : Create.cpp
// Author      : dh
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
/*
 *
 *  Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.

 Example 1:

 nums1 = [3, 4, 6, 5]
 nums2 = [9, 1, 2, 5, 8, 3]
 k = 5
 return [9, 8, 6, 5, 3]

 Example 2:

 nums1 = [6, 7]
 nums2 = [6, 0, 4]
 k = 5
 return [6, 7, 6, 0, 4]

 Example 3:

 nums1 = [3, 9]
 nums2 = [8, 9]
 k = 3
 return [9, 8, 9]

 Credits:
 Special thanks to @dietpepsi for adding this problem and creating all test cases.

 Subscribe to see which companies asked this question
 *
 */
#include <iostream>
#include <vector>
using namespace std;
class Solution
{
public:
	vector<int> maxNumber(vector<int>& nums1, int begin1, vector<int>& nums2,
			int begin2, int k)
	{
		//length of nums1,nums2 is m,n
		//在保证之后能取到足够数量的数字情况下选择最大的数字
		//两个数组有相同最大值时需要选取之前值较小的一个，为使下次能选到较大的值
		int m = nums1.size();
		int n = nums2.size();
		//		cout << m << "," << n << endl;
		int maxidInNums1, maxidInNums2;
		vector<int> rvec;
		while (k > 0)
		{
			maxidInNums1 = findSuitableMaxId(nums1, begin1, n - begin2, k);
			maxidInNums2 = findSuitableMaxId(nums2, begin2, m - begin1, k);
//			cout << "maxid1,2:" << maxidInNums1 << "," << maxidInNums2 << endl;
			//直接的大于小于好处理，等于的情况需要递归
			if (maxidInNums2 == -1
					|| ((maxidInNums1 != -1)
							&& nums1[maxidInNums1] > nums2[maxidInNums2]))
			{
				begin1 = maxidInNums1 + 1;
				rvec.push_back(nums1[maxidInNums1]);
				if (m - begin1 >= k)
				{
					begin2 = maxidInNums2;
				}
			}
			else if (maxidInNums1 == -1
					|| ((maxidInNums2 != -1)
							&& nums1[maxidInNums1] < nums2[maxidInNums2]))
			{
				begin2 = maxidInNums2 + 1;
				rvec.push_back(nums2[maxidInNums2]);
				if (n - begin2 >= k)
				{
					begin1 = maxidInNums1;
				}
			}
			else
			{
				rvec.push_back(nums2[maxidInNums2]);
				k--;
				vector<int> vec1, vec2;
				if (m - maxidInNums1 - 1 >= k)
				{
					begin2 = maxidInNums2;
				}
				if (n - maxidInNums2 - 1 >= k)
				{
					begin1 = maxidInNums1;
				}
				vec1 = maxNumber(nums1, maxidInNums1 + 1, nums2, begin2, k);
				vec2 = maxNumber(nums1, begin1, nums2, maxidInNums2 + 1, k);
				vector<int> &bigger = getBiggerOne(vec1, vec2);
				rvec.insert(rvec.end(), bigger.begin(), bigger.end());
				break;
			}

			k--;
		}
		return rvec;
	}
	vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k)
	{
		return maxNumber(nums1, 0, nums2, 0, k);
	}
	vector<int>& getBiggerOne(vector<int>& nums1, vector<int>& nums2)
	{
		int len = nums1.size();
		for (int i = 0; i < len; i++)
		{
			if (nums1[i] > nums2[i])
			{
				return nums1;
			}
			else if (nums1[i] < nums2[i])
			{
				return nums2;
			}
		}
		return nums1;
	}
	int findSuitableMaxId(vector<int>& nums, int begin, int anotherLen, int k)
	{
		int len = nums.size();
		if (begin >= len)
		{
			//取不出任何值，返回下标-1
			return -1;
		}
		int maxid = begin;

		for (int i = begin + 1; i < len; i++)
		{
			if (nums[maxid] < nums[i] && (len - i + anotherLen) >= k)
			{
				maxid = i;
			}
		}
		return maxid;
	}
	void print(vector<int> &nums)
	{
		int len = nums.size();
		for (int i = 0; i < len; i++)
		{
			cout << nums[i] << " ";
		}
		cout << endl;
	}

};

int main()
{
	cout << "Hello World" << endl; // prints Hello World
	Solution s;
	int nums1[] =
	{ 1, 5, 8, 1, 4, 0, 8, 5, 0, 7, 0, 5, 7, 6, 0, 5, 5, 2, 4, 3, 6, 4, 6, 6, 3,
			8, 1, 1, 3, 1, 3, 5, 4, 3, 9, 5, 0, 3, 8, 1, 4, 9, 8, 8, 3, 4, 6, 2,
			5, 4, 1, 1, 4, 6, 5, 2, 3, 6, 3, 5, 4, 3, 0, 7, 2, 5, 1, 5, 3, 3, 8,
			2, 2, 7, 6, 7, 5, 9, 1, 2 };
//	int nums1[] =
//	{ };
	int nums2[] =
	{ 7, 8, 5, 8, 0, 1, 1, 6, 1, 7, 6, 9, 6, 6, 0, 8, 5, 8, 6, 3, 4, 0, 4, 6, 7,
			8, 7, 7, 7, 5, 7, 2, 5, 2, 1, 9, 5, 9, 3, 7, 3, 9, 9, 3, 1, 4, 3, 3,
			9, 7, 1, 4, 4, 1, 4, 0, 2, 3, 1, 3, 2, 0, 2, 4, 0, 9, 2, 0, 1, 3, 9,
			1, 2, 2, 6, 6, 9, 3, 6, 0 };
	int length;
	length = sizeof(nums1) / sizeof(nums1[0]);
	vector<int> v1(&nums1[0], &nums1[length]);
	length = sizeof(nums2) / sizeof(nums2[0]);
	vector<int> v2(&nums2[0], &nums2[length]);
	int k = 80;

	vector<int> vec = s.maxNumber(v1, v2, k);
	s.print(vec);

	return 0;
}
